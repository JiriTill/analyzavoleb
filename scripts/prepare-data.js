// scripts/prepare-data.js - √öprava funkce processElection

// ... (zbytek skriptu je stejn√Ω)

// ---------- hlavn√≠ pipeline pro volby ----------
async function processElection(tag, manualTokensData, manualTokensCns, okrskyGeoUrl) {
  // ... (naƒçten√≠ dataZip, cnsZip - beze zmƒõny)
  const dataZip = findManualZip(manualTokensData);
  const cnsZip  = findManualZip(manualTokensCns);

  if (!dataZip || !cnsZip) {
    throw new Error(`Chyb√≠ zipy dat/ƒç√≠seln√≠k≈Ø (hledal jsem: ${manualTokensData.join("+")} / ${manualTokensCns.join("+")})`);
  }
  
  // 2) naƒçti CSV z obou zip≈Ø
  let csvDataFiles, csvCnsFiles;
  
  // !!! ROBUSTN√ç NAƒåTEN√ç ZIP SOUBOR≈Æ S O≈†ET≈òEN√çM CHYBY ADM-ZIP !!!
  try {
      csvDataFiles = listCsvFilesInZip(dataZip);
      csvCnsFiles  = listCsvFilesInZip(cnsZip);
  } catch (e) {
      if (e.message.includes("ADM-ZIP: Invalid or unsupported zip format")) {
          // Pokud chyba nastane u KZ nebo KV, m≈Ø≈æeme to ignorovat, pokud chyb√≠ data
          if (tag !== 'psp2025') {
              throw new Error(`ZIP soubory pro ${tag} jsou po≈°kozen√©, p≈ôeskoƒçeno: ${e.message}`);
          }
      }
      // Pro PSP 2025 je to kritick√° chyba, skript havaruje
      throw e; 
  }
  
  // POZOR: Pokud nastala chyba a byla ignorov√°na (KZ, KV), csvFiles budou undefined
  if (!csvDataFiles || !csvCnsFiles || csvDataFiles.length === 0 || csvCnsFiles.length === 0) {
      if (tag !== 'psp2025') {
          console.warn(`[${tag}] Ignoruji, proto≈æe ZIPy jsou neplatn√©/pr√°zdn√©.`);
          return; // Zastav√≠ zpracov√°n√≠ pro tento tag
      }
      throw new Error(`${tag}: Data ZIPy jsou po≈°kozen√©/pr√°zdn√©.`);
  }

  // ... (zbytek logiky - detekce T4/T4p, ƒçten√≠ dat - beze zmƒõny)
  // ... (stahov√°n√≠ GeoJSON - beze zmƒõny)
  // ... (generov√°n√≠ soubor≈Ø results_*.json - beze zmƒõny)
}

// ... (v main funkci se √∫prava logiky try/catch pro KZ a KV vr√°t√≠, aby se nenaƒç√≠tala po≈°kozen√° data)

(async function main() {
  await fsp.mkdir(OUT_DIR, { recursive: true });
  const okrsky2025 = process.env.OKRSKY_2025_GEOJSON_URL || null;

  if (!okrsky2025) {
     console.error("Chyba: Promƒõnn√° prost≈ôed√≠ OKRSKY_2025_GEOJSON_URL nen√≠ nastavena. Nelze pokraƒçovat.");
     process.exit(1);
  }
  
  // PSP 2025 MUS√ç fungovat
  try {
    await processElection(
      "psp2025",
      ["ps2025","data","csv"],
      ["ps2025","cisel","csv"],
      okrsky2025
    );
  } catch (e) {
    console.error(`üî¥ Chyba p≈ôi zpracov√°n√≠ PSP 2025: ${e.message}`);
  }

  // KZ 2024 a KV 2022 mohou selhat kv≈Øli po≈°kozen√Ωm ZIP≈Øm.
  // Zde se mus√≠ zajistit, ≈æe i kdy≈æ sel≈æou, skript nespadne.
  try {
    await processElection(
      "kz2024",
      ["kz2024","data","csv"],
      ["kz2024","cisel","csv"],
      okrsky2025
    );
  } catch (e) {
    console.warn(`‚ö†Ô∏è Varov√°n√≠: P≈ôeskoƒçeno KZ 2024: ${e.message}`);
  }

  try {
    await processElection(
      "kv2022",
      ["kv2022","data","csv"],
      ["kv2022","cisel","csv"],
      okrsky2025
    );
  } catch (e) {
    console.warn(`‚ö†Ô∏è Varov√°n√≠: P≈ôeskoƒçeno KV 2022: ${e.message}`);
  }

  console.log(`‚úî Hotovo. V√Ωstupy v ${OUT_DIR}`);
})().catch((e) => {
  console.error("FAT√ÅLN√ç CHYBA SKRIPTU:", e);
  process.exit(1);
});
